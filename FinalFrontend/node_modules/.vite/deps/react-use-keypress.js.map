{
  "version": 3,
  "sources": ["../../tiny-invariant/dist/esm/tiny-invariant.js", "../../react-use-keypress/src/shimKeyboardEvent.js", "../../react-use-keypress/src/index.js"],
  "sourcesContent": ["var isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    var provided = typeof message === 'function' ? message() : message;\n    var value = provided ? \"\".concat(prefix, \": \").concat(provided) : prefix;\n    throw new Error(value);\n}\n\nexport { invariant as default };\n", "// Fixing inconsistencies from older browsers\n// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst aliases = new Map([\n  ['Win', 'Meta'],\n  ['Scroll', 'ScrollLock'],\n  ['Spacebar', ' '],\n  ['Down', 'ArrowDown'],\n  ['Left', 'ArrowLeft'],\n  ['Right', 'ArrowRight'],\n  ['Up', 'ArrowUp'],\n  ['Del', 'Delete'],\n  ['Crsel', 'CrSel'],\n  ['Exsel', 'ExSel'],\n  ['Apps', 'ContextMenu'],\n  ['Esc', 'Escape'],\n  ['Decimal', '.'],\n  ['Multiply', '*'],\n  ['Add', '+'],\n  ['Subtract', '-'],\n  ['Divide', '/'],\n]);\n\nconst shimKeyboardEvent = (event) => {\n  if (aliases.has(event.key)) {\n    const key = aliases.get(event.key);\n\n    Object.defineProperty(event, 'key', {\n      configurable: true,\n      enumerable: true,\n      get() {\n        return key;\n      },\n    });\n  }\n};\n\nexport default shimKeyboardEvent;\n", "import { useEffect, useRef } from 'react';\nimport invariant from 'tiny-invariant';\nimport shimKeyboardEvent from './shimKeyboardEvent';\n\nconst useKeypress = (keys, handler) => {\n  invariant(\n    Array.isArray(keys) || typeof keys === 'string',\n    'Expected `keys` to be an array or string'\n  );\n  if (Array.isArray(keys)) {\n    keys.forEach((key, i) => {\n      invariant(\n        typeof key === 'string',\n        `Expected \\`keys[${i}]\\` to be a string`\n      );\n    });\n  }\n  invariant(\n    typeof handler === 'function' || handler == null,\n    'Expected `handler` to be a function'\n  );\n\n  const eventListenerRef = useRef();\n\n  useEffect(() => {\n    eventListenerRef.current = (event) => {\n      shimKeyboardEvent(event);\n      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {\n        handler?.(event);\n      }\n    };\n  }, [keys, handler]);\n\n  useEffect(() => {\n    const eventListener = (event) => {\n      eventListenerRef.current(event);\n    };\n    window.addEventListener('keydown', eventListener);\n    return () => {\n      window.removeEventListener('keydown', eventListener);\n    };\n  }, []);\n};\n\nexport default useKeypress;\n"],
  "mappings": ";;;;;;;;;;;AAAA,IAAI,eAAe;AACnB,IAAI,SAAS;AACb,SAAS,UAAU,WAAW,SAAS;AACnC,MAAI,WAAW;AACX;AAAA,EACJ;AACA,MAAI,cAAc;AACd,UAAM,IAAI,MAAM,MAAM;AAAA,EAC1B;AACA,MAAI,WAAW,OAAO,YAAY,aAAa,QAAQ,IAAI;AAC3D,MAAI,QAAQ,WAAW,GAAG,OAAO,QAAQ,IAAI,EAAE,OAAO,QAAQ,IAAI;AAClE,QAAM,IAAI,MAAM,KAAK;AACzB;;;ACVA,IAAMA,UAAU,oBAAIC,IAAI,CACtB,CAAC,OAAO,MAAR,GACA,CAAC,UAAU,YAAX,GACA,CAAC,YAAY,GAAb,GACA,CAAC,QAAQ,WAAT,GACA,CAAC,QAAQ,WAAT,GACA,CAAC,SAAS,YAAV,GACA,CAAC,MAAM,SAAP,GACA,CAAC,OAAO,QAAR,GACA,CAAC,SAAS,OAAV,GACA,CAAC,SAAS,OAAV,GACA,CAAC,QAAQ,aAAT,GACA,CAAC,OAAO,QAAR,GACA,CAAC,WAAW,GAAZ,GACA,CAAC,YAAY,GAAb,GACA,CAAC,OAAO,GAAR,GACA,CAAC,YAAY,GAAb,GACA,CAAC,UAAU,GAAX,CAjBsB,CAAR;AAoBhB,IAAMC,oBAAoB,SAApBA,mBAAqBC,OAAU;AAC/BH,MAAAA,QAAQI,IAAID,MAAME,GAAlB,GAAwB;AACpBA,QAAAA,MAAML,QAAQM,IAAIH,MAAME,GAAlB;AAEZE,WAAOC,eAAeL,OAAO,OAAO;MAClCM,cAAc;MACdC,YAAY;MACZJ,KAAM,SAAA,MAAA;AACJ,eAAOD;MACR;IALiC,CAApC;EAOD;AACF;AC9BKM,IAAAA,cAAc,SAAdA,aAAeC,MAAMC,SAAY;AACrC,IACEC,MAAMC,QAAQH,IAAd,KAAuB,OAAOA,SAAS,YADzC,OAAAI,UAAS,OAEP,0CAFO,IAATA,UAAA,KAAA,IAAA;AAIA,MAAIF,MAAMC,QAAQH,IAAd,GAAqB;AACvBA,SAAKK,QAAQ,SAACZ,KAAKa,GAAM;AAErB,QAAA,OAAOb,QAAQ,YADjB,OAAAW,UAAS,OAAA,oBAEYE,IAFZ,mBAAA,IAATF,UAAA,KAAA,IAAA;IAID,CALD;EAMD;AACD,IACE,OAAOH,YAAY,cAAcA,WAAW,QAD9C,OAAAG,UAEE,OAAA,qCAFO,IAATA,UAAA,KAAA,IAAA;AAKMG,MAAAA,uBAAmBC,qBAAM;AAE/BC,8BAAU,WAAM;AACdF,qBAAiBG,UAAU,SAACnB,OAAU;AACpCD,wBAAkBC,KAAD;AACbW,UAAAA,MAAMC,QAAQH,IAAd,IAAsBA,KAAKW,SAASpB,MAAME,GAApB,IAA2BO,SAAST,MAAME,KAAK;AACvEQ,mBAAA,OAAA,SAAAA,QAAUV,KAAH;MACR;IACF;EACF,GAAE,CAACS,MAAMC,OAAP,CAPM;AASTQ,8BAAU,WAAM;AACd,QAAMG,gBAAgB,SAAhBA,eAAiBrB,OAAU;AAC/BgB,uBAAiBG,QAAQnB,KAAzB;IACD;AACDsB,WAAOC,iBAAiB,WAAWF,aAAnC;AACA,WAAO,WAAM;AACXC,aAAOE,oBAAoB,WAAWH,aAAtC;IACD;EACF,GAAE,CAAA,CARM;AASV;",
  "names": ["aliases", "Map", "shimKeyboardEvent", "event", "has", "key", "get", "Object", "defineProperty", "configurable", "enumerable", "useKeypress", "keys", "handler", "Array", "isArray", "invariant", "forEach", "i", "eventListenerRef", "useRef", "useEffect", "current", "includes", "eventListener", "window", "addEventListener", "removeEventListener"]
}
