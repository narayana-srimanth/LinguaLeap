import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/react-use-keypress/lib/index.esm.js
var import_react = __toESM(require_react());

// node_modules/tiny-invariant/dist/esm/tiny-invariant.js
var isProduction = false;
var prefix = "Invariant failed";
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  var provided = typeof message === "function" ? message() : message;
  var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
  throw new Error(value);
}

// node_modules/react-use-keypress/lib/index.esm.js
var aliases = /* @__PURE__ */ new Map([["Win", "Meta"], ["Scroll", "ScrollLock"], ["Spacebar", " "], ["Down", "ArrowDown"], ["Left", "ArrowLeft"], ["Right", "ArrowRight"], ["Up", "ArrowUp"], ["Del", "Delete"], ["Crsel", "CrSel"], ["Exsel", "ExSel"], ["Apps", "ContextMenu"], ["Esc", "Escape"], ["Decimal", "."], ["Multiply", "*"], ["Add", "+"], ["Subtract", "-"], ["Divide", "/"]]);
var shimKeyboardEvent = function shimKeyboardEvent2(event) {
  if (aliases.has(event.key)) {
    var key = aliases.get(event.key);
    Object.defineProperty(event, "key", {
      configurable: true,
      enumerable: true,
      get: function get() {
        return key;
      }
    });
  }
};
var useKeypress = function useKeypress2(keys, handler) {
  !(Array.isArray(keys) || typeof keys === "string") ? true ? invariant(false, "Expected `keys` to be an array or string") : invariant(false) : void 0;
  if (Array.isArray(keys)) {
    keys.forEach(function(key, i) {
      !(typeof key === "string") ? true ? invariant(false, "Expected `keys[" + i + "]` to be a string") : invariant(false) : void 0;
    });
  }
  !(typeof handler === "function" || handler == null) ? true ? invariant(false, "Expected `handler` to be a function") : invariant(false) : void 0;
  var eventListenerRef = (0, import_react.useRef)();
  (0, import_react.useEffect)(function() {
    eventListenerRef.current = function(event) {
      shimKeyboardEvent(event);
      if (Array.isArray(keys) ? keys.includes(event.key) : keys === event.key) {
        handler == null ? void 0 : handler(event);
      }
    };
  }, [keys, handler]);
  (0, import_react.useEffect)(function() {
    var eventListener = function eventListener2(event) {
      eventListenerRef.current(event);
    };
    window.addEventListener("keydown", eventListener);
    return function() {
      window.removeEventListener("keydown", eventListener);
    };
  }, []);
};
export {
  useKeypress as default
};
//# sourceMappingURL=react-use-keypress.js.map
